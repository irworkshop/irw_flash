package{//import org.fenton.loaders.parsecomma;import com.dVyper.utils.Alert;import flash.display.MovieClip;import flash.display.Sprite//import flash.events.Event;import flash.net.*import flash.events.*import flash.text.TextField;import flash.text.TextFieldAutoSize;import flash.text.TextFormat;import flash.text.TextFieldType;[SWF(width="700",height="500", frameRate="24", backgroundColor="0xFFFFFF")]public class load_tester extends MovieClip{    var loader:URLLoader = new URLLoader();	var result : Array = new Array ()			public function load_tester() {      configureListeners(loader);      var request:URLRequest = new URLRequest("points.txt");      try {            	loader.load(request);           } catch (error:Error) {                trace("Unable to load requested document.");		   }	}        	private function configureListeners(dispatcher:IEventDispatcher):void {		dispatcher.addEventListener(Event.COMPLETE, completeHandler);            //dispatcher.addEventListener(Event.OPEN, openHandler);            //dispatcher.addEventListener(ProgressEvent.PROGRESS, progressHandler);            //dispatcher.addEventListener(SecurityErrorEvent.SECURITY_ERROR, securityErrorHandler);            //dispatcher.addEventListener(HTTPStatusEvent.HTTP_STATUS, httpStatusHandler);            //dispatcher.addEventListener(IOErrorEvent.IO_ERROR, ioErrorHandler);  	}						private function completeHandler ( event : Event )	{		var rows = loader.data.toString().split("\n");        for(  var i : int = 0; i < rows.length; i++ )        {			//trace("handling row " + i);			result.push( rows[ i ].split("|") );		}		trace("loaded data with row[3][0] " + String(result[3][0]) );		var newSprite:Sprite = drawgraph(rows[3].split("|"));				// add rect to serve as 'padding'		var backdrop:Sprite = new Sprite();				backdrop.graphics.lineStyle(0,0xFDE1B4);		backdrop.graphics.beginFill(0xFDE1B4, 1);      		backdrop.graphics.drawRect(0,0,190,100);		backdrop.graphics.endFill();		backdrop.x = 5;		backdrop.y = 5;		stage.addChild(backdrop);						newSprite.x = 10;		newSprite.y = 10;		stage.addChild(newSprite);		    }		private function drawgraph(rowdata:Array):Sprite 	{		//trace("Building graph of " + String(rowdata[1]));				var align_right:TextFormat = new TextFormat();		align_right.align = "left";		align_right.font = "Arial";		align_right.color = 0x999999;		align_right.size = 13;				var outerwidth:int = 180;		var outerheight:int = 90;				var label_height:int = 13; 				var label_width:int = 37;		var tic_length:int = 5; 				var origin_y:int = outerheight - 20;		var origin_x:int = 18				var tic_width:int = 1;		var tic_color:uint = 0x999999;				var line_width:int = 2;		var line_color:uint = 0x999999;						var y_max_value:int = 1800;		var y_min_value:int = 0;				var y_scale:Number = ( y_max_value - y_min_value ) / ( origin_y - ( label_height/2 ) ) ;				var x_max_value:int = 2009;		var x_min_value:int = 1981;								var graf:Sprite = new Sprite;				// outline - for testing.		graf.graphics.lineStyle(0,0xFDE1B4);		graf.graphics.beginFill(0xFDE1B4, 1);      		graf.graphics.drawRect(0,0,outerwidth,outerheight);		graf.graphics.endFill();				graf.graphics.lineStyle(1,0x999999);				// Draw Y labels:				var y_max_label:TextField = new TextField();		//myLabel.autoSize = TextFieldAutoSize.LEFT;		y_max_label.text = "1,800";		y_max_label.x=0;		y_max_label.y=0;		y_max_label.width=label_width;		y_max_label.setTextFormat(align_right);		graf.addChild(y_max_label);				var y_min_label:TextField = new TextField();		//myLabel.autoSize = TextFieldAutoSize.LEFT;		y_min_label.text = "0";		y_min_label.x=0;		y_min_label.y=origin_y - label_height/2 - 2;		y_min_label.width=label_width;		y_min_label.setTextFormat(align_right);		graf.addChild(y_min_label);				// Draw Y tics at max and min:		graf.graphics.lineStyle(tic_width, tic_color);		// top tic:		graf.graphics.moveTo (outerwidth - label_width/2, label_height/2);		graf.graphics.lineTo (outerwidth - label_width/2 + tic_length, label_height/2);		// bottom tic: 		graf.graphics.moveTo (outerwidth - label_width/2, origin_y);		graf.graphics.lineTo (outerwidth - label_width/2 + tic_length, origin_y);						// Draw X labels:				var x_max_label:TextField = new TextField();		//myLabel.autoSize = TextFieldAutoSize.LEFT;		x_max_label.text = "2009";		x_max_label.x=outerwidth - label_width;		x_max_label.y=outerheight-label_height;		x_max_label.width=label_width;		x_max_label.setTextFormat(align_right);		graf.addChild(x_max_label);		var x_min_label:TextField = new TextField();		//myLabel.autoSize = TextFieldAutoSize.LEFT;		x_min_label.text = "1981";		x_min_label.x=origin_x - label_width/2 + 3;		x_min_label.y=outerheight - label_height;		x_min_label.width=label_width;		x_min_label.setTextFormat(align_right);		graf.addChild(x_min_label);						// left tic:		graf.graphics.moveTo (origin_x, origin_y);		graf.graphics.lineTo (origin_x, origin_y + tic_length);		// right tic: 		graf.graphics.moveTo (outerwidth - label_width/2, origin_y);		graf.graphics.lineTo (outerwidth - label_width/2, origin_y + tic_length);						var x_steps:int = x_max_value - x_min_value;						graf.graphics.lineStyle(line_width, line_color);				// move to the first step before drawing		graf.graphics.moveTo (origin_x, origin_y + rowdata[8+2009-1981]/y_scale);				for(  var i : int = 1; i <=  x_steps; i++ ) {			//trace("plotting: " + String(i) + "  " + String( rowdata[8+2009-1981-i]));			graf.graphics.lineTo(origin_x + i/x_steps * (outerwidth-label_width/2 - origin_x), origin_y - rowdata[8+2009-1981-i]/y_scale);		}				return graf;					}				}}